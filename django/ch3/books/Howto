Class 형 View 의 코딩이 간단한 점을 이용

- Application 설계하기
- 프로젝트 뼈대 만들기
- Model
- URLconf
- View
- Template

순서로 진행한다.

books: 책, 저자, 출판사의 정보를 관리하는, 정보를 보여주고 입력, 수정, 삭제할 수 있는 웹 앱

먼저 UI 설계

index.html - Book Management System
book_list.html - Book list
book_detail.html - Details of the book

Book 테이블 설계를 먼저...
id
title
author
publisher
publication date

Author 테이블 설계
id
salutation
name
email

Publisher 테이블 설계
id
name
address
website

View의 흐름 설계
URL
/books/ -> BooksModelView.as_view() -> index.html
/books/book -> BookList.as_view() -> book_list.html
/books/book/3/ -> BookDetail.as_view() -> book_detail.html


위와 같은 방식으로 진행할 것.

1. Model 코딩하기
Book, Author, Publish Class 정의
Admin 사이트에 보이도록 등록

2. URLconf
먼저 mysite/urls.py 에도 추가
그리고 books/urls.py 에 추가

Defined 7 urls
그리고 각각 해당하는 클래스형 뷰 7개
템플릿 파일도 7개 필요

3. Class 형 View 코딩하기
TemplateView
특별한 로직이 없고 템플릿 파일만을 렌더링 하는 경우
필수적으로 template_name 클래스 variable 을 override 해줘야 함
context 변수가 있는 경우 get_context_data 를 override

ListView
객체가 들어있는 리스트를 구성해서 이를 컨텍스트 변수로 템플릿 시스템에 넘겨준다
모든 레코드를 가져오는 경우에는 모델 클래스명만 정해주면 됨
- 기본값: 컨텍스트 변수로 object_list 사용
템플릿 파일을 : 모델명소문자_list.html 로 생성

DetailView
특정 객체 하나를 컨텍스트 변수에 담아서 템플릿 시스템에 넘겨주면 되는 경우
테이블에서 Primary Key 로 조회해서 특정 객체를 가져오는 경우에는 모델 클래스 명만 정해주면 된다
pk의 값은 urlconf 에서 추출하여 뷰로 넘어온 parameter 사용
-기본값: 컨텍스트 변수로 object 사용
템플릿 파일 : 모델명소문자_detail.html


4. Template 코딩하기
상속 기능을 이용해보자!
content 블록만 재정의하고 나머지는 그대로 사용할 것

_list
공통적으로 base_books.html template 상속
View 로부터 object_list 컨텍스트 변수 전달받아 object_list 의 객체들을 순회하면서 하나씩 보여주기

_detail
공통적으로 base_books.html 상속받고 있고
object 라는 컨텍스트 변수로 특정 레코드를 절달받아서
레코드에 들어있는 column 값들을 보여주고 있다.

상속 구조
base.html -> base_books.html -> xxx_detail.html 등
